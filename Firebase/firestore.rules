rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // üîß Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isInTeam(teamId) {
      return exists(/databases/$(database)/documents/teams/$(teamId)/users/$(request.auth.uid));
    }


    // New role-based permission functions
    function getUserRole(teamId) {
      return get(/databases/$(database)/documents/teams/$(teamId)/users/$(request.auth.uid)).data.role;
    }

    function isAdmin(teamId) {
      let role = getUserRole(teamId);
      return role == "admin";
    }

    function isManager(teamId) {
      let role = getUserRole(teamId);
      return role == "manager" || isAdmin(teamId);
    }

    function isFieldWorker(teamId) {
      let role = getUserRole(teamId);
      return role == "field_worker" || isManager(teamId);
    }

    // Check if user can manage other users (admin only)
    function canManageUsers(teamId) {
      return isAdmin(teamId);
    }

    // Check if user can manage clients (admin and manager)
    function canManageClients(teamId) {
      return isManager(teamId);
    }

    // Check if user can manage all incidents (admin and manager)  
    function canManageAllIncidents(teamId) {
      return isManager(teamId);
    }

    // Check if user can access their own data
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // üë§ User documents with enhanced role-based access
    match /teams/{teamId}/users/{userId} {
      // Users can read their own document, or any user if they're in the team
      allow read: if isSignedIn() && (isOwner(userId) || isInTeam(teamId));
      
      // Users can update their own profile info (but not role)
      allow update: if isSignedIn() && isOwner(userId) 
                   && !("role" in request.resource.data.diff(resource.data).affectedKeys());
      
      // Only admins can create users, update roles, or delete users
      allow create: if isSignedIn() && canManageUsers(teamId);
      allow delete: if isSignedIn() && canManageUsers(teamId);
      
      // Only admins can update user roles
      allow update: if isSignedIn() && canManageUsers(teamId) 
                   && ("role" in request.resource.data.diff(resource.data).affectedKeys());
    }

    // Team documents
    match /teams/{teamId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn(); // ‚úÖ allow any signed-in user to create a new team
      allow update: if isSignedIn() && isAdmin(teamId); // Only admins can update team
      allow delete: if isSignedIn() && isAdmin(teamId); // Only admins can delete team
    }

    // üßë‚Äçüíº Clients with role-based permissions
    match /teams/{teamId}/clients/{clientId} {
      // All team members can read client info
      allow read: if isSignedIn() && isInTeam(teamId);
      
      // Managers and admins can manage clients
      allow create, update, delete: if isSignedIn() && canManageClients(teamId);
    }

    // üéØ Incidents under client-specific path with role-based access
    match /teams/{teamId}/clients/{clientId}/incidents/{incidentId} {
      // All team members can read incidents
      allow read: if isSignedIn() && isInTeam(teamId);
      
      // All team members can create incidents
      allow create: if isSignedIn() && isInTeam(teamId);
      
      // All team members can update any incident
      allow update: if isSignedIn() && isInTeam(teamId);
      
      // Only managers and admins can delete incidents
      allow delete: if isSignedIn() && canManageAllIncidents(teamId);
    }

    // üéØ Top-level incidents collection for the team with role-based access
    match /teams/{teamId}/incidents/{incidentId} {
      // All team members can read incidents
      allow read: if isSignedIn() && isInTeam(teamId);
      
      // All team members can create incidents
      allow create: if isSignedIn() && isInTeam(teamId);
      
      // All team members can update any incident
      allow update: if isSignedIn() && isInTeam(teamId);
      
      // Only managers and admins can delete incidents
      allow delete: if isSignedIn() && canManageAllIncidents(teamId);
    }

    // üìß Invitation system with role-based permissions
    match /teams/{teamId}/invitations/{invitationId} {
      // Only users who can create invitations can read them
      allow read: if isSignedIn() && isManager(teamId);
      allow write: if false; // All writes go through Cloud Functions
    }


    // üìä Audit logs - only admins can read
    match /teams/{teamId}/auditLogs/{logId} {
      allow read: if isSignedIn() && isAdmin(teamId);
      allow write: if false; // All writes go through Cloud Functions
    }

    // üìà Reports and analytics
    match /teams/{teamId}/reports/{reportId} {
      // Managers and admins can read all reports
      // Field workers can only read basic reports they created
      allow read: if isSignedIn() && isInTeam(teamId) && 
                 (isManager(teamId) || resource.data.createdBy == request.auth.uid);
      
      // Only managers and admins can create advanced reports
      allow create: if isSignedIn() && isManager(teamId);
      
      // Users can update their own reports, managers can update any
      allow update: if isSignedIn() && isInTeam(teamId) && 
                   (isManager(teamId) || resource.data.createdBy == request.auth.uid);
      
      // Only managers and admins can delete reports
      allow delete: if isSignedIn() && isManager(teamId);
    }
  }
}